name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      target:
        description: 'Publish target'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi
      force_publish:
        description: 'Force publish even if version exists'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.target || (github.event_name == 'release' && 'pypi' || 'testpypi') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Create virtual environment
      run: uv venv .venv --python 3.12

    - name: Install dependencies
      run: uv sync

    - name: Install build and publish tools
      run: uv pip install build twine

    - name: Clean previous builds
      run: |
        rm -rf dist/
        rm -rf build/
        rm -rf *.egg-info

    - name: Build package
      run: uv run python -m build

    - name: Check package
      run: uv run twine check dist/*

    - name: Get package info
      id: package_info
      run: |
        VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        PACKAGE_NAME=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "📦 Package: $PACKAGE_NAME"
        echo "🏷️  Version: $VERSION"

    - name: Check if version exists on PyPI
      if: github.event.inputs.target == 'pypi' || github.event_name == 'release'
      run: |
        PACKAGE_NAME="${{ steps.package_info.outputs.package_name }}"
        VERSION="${{ steps.package_info.outputs.version }}"
        
        echo "Checking if $PACKAGE_NAME==$VERSION exists on PyPI..."
        
        if pip index versions "$PACKAGE_NAME" | grep -q "$VERSION"; then
          echo "❌ Version $VERSION already exists on PyPI!"
          if [ "${{ github.event.inputs.force_publish }}" != "true" ]; then
            echo "Use force_publish=true to override this check."
            exit 1
          else
            echo "⚠️  Force publish enabled, continuing anyway..."
          fi
        else
          echo "✅ Version $VERSION does not exist on PyPI, safe to publish"
        fi

    - name: Publish to TestPyPI
      if: github.event.inputs.target == 'testpypi' || (github.event_name != 'release' && github.event.inputs.target != 'pypi')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to TestPyPI..."
        uv run twine upload --repository testpypi dist/*
        
        PACKAGE_NAME="${{ steps.package_info.outputs.package_name }}"
        VERSION="${{ steps.package_info.outputs.version }}"
        echo "✅ Successfully published to TestPyPI!"
        echo "📦 View at: https://test.pypi.org/project/$PACKAGE_NAME/$VERSION/"
        echo "📥 Install with: pip install -i https://test.pypi.org/simple/ $PACKAGE_NAME==$VERSION"

    - name: Publish to PyPI
      if: github.event.inputs.target == 'pypi' || github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI..."
        uv run twine upload dist/*
        
        PACKAGE_NAME="${{ steps.package_info.outputs.package_name }}"
        VERSION="${{ steps.package_info.outputs.version }}"
        echo "✅ Successfully published to PyPI!"
        echo "📦 View at: https://pypi.org/project/$PACKAGE_NAME/$VERSION/"
        echo "📥 Install with: pip install $PACKAGE_NAME==$VERSION"

    - name: Create deployment summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # 🚀 Package Published Successfully!
        
        **Package:** \`${{ steps.package_info.outputs.package_name }}\`  
        **Version:** \`${{ steps.package_info.outputs.version }}\`  
        **Target:** \`${{ github.event.inputs.target || (github.event_name == 'release' && 'PyPI' || 'TestPyPI') }}\`
        
        ## 📦 Installation
        
        $(if [ "${{ github.event.inputs.target }}" == "pypi" ] || [ "${{ github.event_name }}" == "release" ]; then
          echo '```bash'
          echo 'pip install ${{ steps.package_info.outputs.package_name }}==${{ steps.package_info.outputs.version }}'
          echo '```'
        else
          echo '```bash'
          echo 'pip install -i https://test.pypi.org/simple/ ${{ steps.package_info.outputs.package_name }}==${{ steps.package_info.outputs.version }}'
          echo '```'
        fi)
        
        ## 🔗 Links
        
        $(if [ "${{ github.event.inputs.target }}" == "pypi" ] || [ "${{ github.event_name }}" == "release" ]; then
          echo '- [PyPI Package](https://pypi.org/project/${{ steps.package_info.outputs.package_name }}/${{ steps.package_info.outputs.version }}/)'
        else
          echo '- [TestPyPI Package](https://test.pypi.org/project/${{ steps.package_info.outputs.package_name }}/${{ steps.package_info.outputs.version }}/)'
        fi)
        - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.package_info.outputs.version }})
        EOF

  notify:
    runs-on: ubuntu-latest
    needs: publish
    if: always()
    
    steps:
    - name: Notify success
      if: needs.publish.result == 'success'
      run: |
        echo "✅ Package published successfully!"
        
    - name: Notify failure  
      if: needs.publish.result == 'failure'
      run: |
        echo "❌ Package publication failed!"
        echo "Check the logs above for details."
